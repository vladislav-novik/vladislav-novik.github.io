"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[462],{462:(r,e,t)=>{t.r(e),t.d(e,{default:()=>n});const n="import { ChangeDetectionStrategy, ChangeDetectorRef, DoCheck, HostListener, Input, OnChanges, Renderer2 } from '@angular/core';\r\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-world-view',\r\n  templateUrl: './world-view.component.html',\r\n  styleUrls: ['./world-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class WorldViewComponent implements OnInit, DoCheck, OnChanges {\r\n  @Input() svg!: string;\r\n\r\n  @ViewChild('container') background!: ElementRef;\r\n\r\n  private pinsApplied: boolean = false;\r\n  private svgNamespace = \"http://www.w3.org/2000/svg\";\r\n\r\n  pins = [{\r\n    id: 1,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 380, y: 249},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 2,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 371, y: 457},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 3,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 473, y: 332},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 4,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 526, y: 475},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 5,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 600, y: 312},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 6,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 648, y: 198},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 7,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 748, y: 165},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 8,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 1070, y: 427},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  },{\r\n    id: 9,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 893, y: 385},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 10,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 725, y: 352},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 11,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 632, y: 455},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 12,\r\n    asset: 'assets/pin.svg',\r\n    disabledAsset: 'assets/pin_disabled.svg',\r\n    position: {x: 864, y: 460},\r\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\r\n  }, {\r\n    id: 13,\r\n    asset: 'assets/pin_rehearsal.svg',\r\n    disabledAsset: 'assets/pin_rehearsal_disabled.svg',\r\n    position: {x: 1012, y: 455},\r\n  }, {\r\n    id: 14,\r\n    asset: 'assets/pin_test.svg',\r\n    disabledAsset: 'assets/pin_test_disabled.svg',\r\n    position: {x: 1152, y: 455},\r\n  }];\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges() {\r\n    // this.pinsApplied = false;\r\n    // // remove previous pins or they'll redraw on top of each other\r\n    // const collection = document.getElementsByClassName('pinAsset')\r\n    // Array.from(collection).forEach(element => {\r\n    //   element.parentElement?.removeChild(element);\r\n    // });\r\n    // this.changeDetection.detectChanges();\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  sizeChange(event: Event) {\r\n    if (this.background) {\r\n      const nativeEl = (this.background.nativeElement as HTMLElement);\r\n\r\n      if (nativeEl && nativeEl.children && nativeEl.children.length > 0) {\r\n        const svg = nativeEl.children[0];\r\n        this.renderer.setAttribute(svg, 'height', '100%');\r\n        this.renderer.removeAttribute(svg, 'width');\r\n\r\n        if (window.innerWidth < svg.clientWidth) {\r\n          const widthDiff = svg.clientWidth - window.innerWidth;\r\n          const diffPercentage = (widthDiff / svg.clientWidth) * 100;\r\n          const right = diffPercentage / 2;\r\n          // const right = (widthDiff / svg.clientWidth) * 100; \r\n          this.renderer.setStyle(svg, 'position', `relative`);\r\n          this.renderer.setStyle(svg, 'right', `${right}%`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.background && !this.pinsApplied) {\r\n      const nativeEl = (this.background.nativeElement as HTMLElement);\r\n\r\n      if (nativeEl && nativeEl.children && nativeEl.children.length > 0) {\r\n        const svg = nativeEl.children[0];\r\n        this.renderer.setAttribute(svg, 'height', '100%');\r\n        this.renderer.removeAttribute(svg, 'width');\r\n\r\n        if (window.innerWidth < svg.clientWidth) {\r\n          const widthDiff = svg.clientWidth - window.innerWidth;\r\n          const diffPercentage = (widthDiff / svg.clientWidth) * 100;\r\n          const right = diffPercentage / 2;\r\n          // const right = (widthDiff / svg.clientWidth) * 100;\r\n          this.renderer.setStyle(svg, 'position', `relative`);\r\n          this.renderer.setStyle(svg, 'right', `${right}%`);\r\n        }\r\n\r\n        this.insertPins(svg);\r\n      }\r\n    }\r\n  }\r\n\r\n  private insertPins(parent: Element) {\r\n    if (this.pins) {\r\n      this.pins.forEach(p => {\r\n        this.insertPin(p, parent);\r\n        this.pinsApplied = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  private insertPin(pin: Pin, parent: Element) {\r\n    const g = this.renderer.createElement('g', this.svgNamespace);\r\n    const image = this.renderer.createElement('image', this.svgNamespace);\r\n    this.renderer.setAttribute(image, 'x', pin.position.x.toString());\r\n    this.renderer.setAttribute(image, 'y', pin.position.y.toString());\r\n    this.renderer.setAttribute(image, 'width', '75');\r\n    this.renderer.setAttribute(image, 'height', '75');\r\n    this.renderer.setAttribute(image, 'href', pin.asset);\r\n    this.renderer.addClass(image, 'pinAsset');\r\n\r\n    this.renderer.setStyle(image, 'cursor', 'pointer');\r\n    this.renderer.listen(image, 'click', () => this.pinClicked(pin));\r\n\r\n    this.renderer.appendChild(g, image);\r\n    this.renderer.appendChild(parent, g);\r\n  }\r\n\r\n  private pinClicked(pin: Pin) {\r\n    console.log('pin clicked', pin.id);\r\n  }\r\n\r\n  private drawPinTooltip(x: number, y: number, parent: Element) {\r\n    const pinId = 'pin-tooltip';\r\n    const textFontSize = '0.6vw';\r\n    const textLineDY = '15';\r\n    const rectBackground = '#ffffff';\r\n    const rectBorderRadius = '5';\r\n    const rectOpacity = '0.9';\r\n    const textRightLeftMargin = 5;\r\n    const textTopBottomMargin = 3;\r\n    const spaceBetweenPinAndTooltip = 5;\r\n\r\n    const g = this.renderer.createElement('g', this.svgNamespace);\r\n    this.renderer.setAttribute(g, 'id', pinId);\r\n\r\n    const text = this.renderer.createElement('text', this.svgNamespace);\r\n    this.renderer.setAttribute(text, 'x', x.toString());\r\n    this.renderer.setAttribute(text, 'y', y.toString());\r\n    this.renderer.setAttribute(text, 'font-size', textFontSize);\r\n\r\n    this.renderer.appendChild(g, text);\r\n    this.renderer.appendChild(parent, g);\r\n\r\n    const textBox = (text as SVGTextElement).getBBox();\r\n\r\n    const rect = this.renderer.createElement('rect', this.svgNamespace);\r\n    this.renderer.setAttribute(rect, 'width', (textBox.width + textRightLeftMargin * 2).toString());\r\n    this.renderer.setAttribute(rect, 'height', (textBox.height + textTopBottomMargin * 2).toString());\r\n    this.renderer.setAttribute(rect, 'x', (textBox.x - textBox.width / 2).toString());\r\n    this.renderer.setAttribute(\r\n      rect,\r\n      'y',\r\n      (textBox.y - textBox.height - textTopBottomMargin * 2 - spaceBetweenPinAndTooltip).toString()\r\n    );\r\n    this.renderer.setAttribute(rect, 'fill', rectBackground);\r\n    this.renderer.setAttribute(rect, 'rx', rectBorderRadius);\r\n    this.renderer.setAttribute(rect, 'fill-opacity', rectOpacity);\r\n\r\n    // add 'margin' to text inside rect\r\n    this.renderer.setAttribute(text, 'x', (textBox.x - (textBox.width / 2) + textRightLeftMargin).toString());\r\n\r\n    const tspans = Array.from((text as SVGTextElement).children);\r\n    tspans.forEach(t => this.renderer.setAttribute(t, 'x', (textBox.x - (textBox.width / 2) + textRightLeftMargin).toString()));\r\n\r\n    // decrease text y with rect height and add space between tooltip and pin\r\n    this.renderer.setAttribute(\r\n      text,\r\n      'y',\r\n      ((text as SVGTextElement).y.baseVal[0].value - textBox.height - textTopBottomMargin - spaceBetweenPinAndTooltip).toString()\r\n    );\r\n\r\n    this.renderer.insertBefore(g, rect, text);\r\n  }\r\n\r\n  private destroyPinTooltip(): void {\r\n    const tooltip = document.getElementById('pin-tooltip');\r\n    tooltip?.remove();\r\n  }\r\n\r\n  private breakTextToLines(text: string): string[] {\r\n    if (!!!text) {\r\n      return [];\r\n    }\r\n\r\n    const words = text.split(' ');\r\n    let currentLength = 0;\r\n    let newStringIndex = 0;\r\n    const result: string[] = [];\r\n\r\n    words.forEach(w => {\r\n      if (currentLength >= 25 && currentLength < text.length) {\r\n        result.push(text.slice(newStringIndex, newStringIndex + currentLength - 1)); // -1 for space removing\r\n\r\n        newStringIndex += currentLength;\r\n        currentLength = 0;\r\n      }\r\n\r\n      currentLength += w.length + 1;\r\n    });\r\n\r\n    result.push(text.slice(newStringIndex));\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\ninterface Pin {\r\n  id: number;\r\n  asset: string;\r\n  disabledAsset: string;\r\n  position: { y: number, x: number };\r\n  stickerAsset?: string;\r\n}\r\n"}}]);