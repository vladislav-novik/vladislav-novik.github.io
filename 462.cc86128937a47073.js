"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[462],{462:(i,e,t)=>{t.r(e),t.d(e,{default:()=>n});const n="import { ChangeDetectionStrategy, ChangeDetectorRef, DoCheck, HostListener, Input, OnChanges, Renderer2 } from '@angular/core';\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'app-world-view',\n  templateUrl: './world-view.component.html',\n  styleUrls: ['./world-view.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorldViewComponent implements OnInit, DoCheck, OnChanges {\n  @Input() svg!: string;\n\n  @ViewChild('container') background!: ElementRef;\n\n  private pinsApplied: boolean = false;\n  private svgNamespace = \"http://www.w3.org/2000/svg\";\n\n  pins = [{\n    id: 1,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 380, y: 249},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 2,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 371, y: 457},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 3,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 473, y: 332},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 4,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 526, y: 475},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 5,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 600, y: 312},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 6,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 648, y: 198},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 7,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 748, y: 165},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 8,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 1070, y: 427},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  },{\n    id: 9,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 893, y: 385},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 10,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 725, y: 352},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 11,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 632, y: 455},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 12,\n    asset: 'pin.svg',\n    disabledAsset: 'pin_disabled.svg',\n    position: {x: 864, y: 460},\n    stickerAsset: 'assets/images/new-image-mapping/letterster/stickers/',\n  }, {\n    id: 13,\n    asset: 'pin_rehearsal.svg',\n    disabledAsset: 'pin_rehearsal_disabled.svg',\n    position: {x: 1012, y: 455},\n  }, {\n    id: 14,\n    asset: 'pin_test.svg',\n    disabledAsset: 'pin_test_disabled.svg',\n    position: {x: 1152, y: 455},\n  }];\n\n  constructor(\n    private renderer: Renderer2,\n  ) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges() {\n    // this.pinsApplied = false;\n    // // remove previous pins or they'll redraw on top of each other\n    // const collection = document.getElementsByClassName('pinAsset')\n    // Array.from(collection).forEach(element => {\n    //   element.parentElement?.removeChild(element);\n    // });\n    // this.changeDetection.detectChanges();\n  }\n\n  @HostListener('window:resize', ['$event'])\n  sizeChange(event: Event) {\n    if (this.background) {\n      const nativeEl = (this.background.nativeElement as HTMLElement);\n\n      if (nativeEl && nativeEl.children && nativeEl.children.length > 0) {\n        const svg = nativeEl.children[0];\n        this.renderer.setAttribute(svg, 'height', '100%');\n        this.renderer.removeAttribute(svg, 'width');\n\n        if (window.innerWidth < svg.clientWidth) {\n          const widthDiff = svg.clientWidth - window.innerWidth;\n          const diffPercentage = (widthDiff / svg.clientWidth) * 100;\n          const right = diffPercentage / 2;\n          // const right = (widthDiff / svg.clientWidth) * 100; \n          this.renderer.setStyle(svg, 'position', `relative`);\n          this.renderer.setStyle(svg, 'right', `${right}%`);\n        }\n      }\n    }\n  }\n\n  ngDoCheck() {\n    if (this.background && !this.pinsApplied) {\n      const nativeEl = (this.background.nativeElement as HTMLElement);\n\n      if (nativeEl && nativeEl.children && nativeEl.children.length > 0) {\n        const svg = nativeEl.children[0];\n        this.renderer.setAttribute(svg, 'height', '100%');\n        this.renderer.removeAttribute(svg, 'width');\n\n        if (window.innerWidth < svg.clientWidth) {\n          const widthDiff = svg.clientWidth - window.innerWidth;\n          const diffPercentage = (widthDiff / svg.clientWidth) * 100;\n          const right = diffPercentage / 2;\n          // const right = (widthDiff / svg.clientWidth) * 100;\n          this.renderer.setStyle(svg, 'position', `relative`);\n          this.renderer.setStyle(svg, 'right', `${right}%`);\n        }\n\n        this.insertPins(svg);\n      }\n    }\n  }\n\n  private insertPins(parent: Element) {\n    if (this.pins) {\n      this.pins.forEach(p => {\n        this.insertPin(p, parent);\n      });\n    }\n  }\n\n  // private insertPins(parent: Element) {\n  //   if (this.pins) {\n  //     this.pins.forEach(p => this.insertPin(p, parent, p.asset));\n  //     this.pinsApplied = true;\n  //   }\n  // }\n\n  private insertPin(pin: Pin, parent: Element) {\n    const g = this.renderer.createElement('g', this.svgNamespace);\n    const image = this.renderer.createElement('image', this.svgNamespace);\n    this.renderer.setAttribute(image, 'x', pin.position.x.toString());\n    this.renderer.setAttribute(image, 'y', pin.position.y.toString());\n    this.renderer.setAttribute(image, 'width', '75');\n    this.renderer.setAttribute(image, 'href', pin.asset);\n    this.renderer.addClass(image, 'pinAsset');\n\n    this.renderer.setStyle(image, 'cursor', 'pointer');\n    this.renderer.listen(image, 'click', () => this.pinClicked(pin));\n\n    this.renderer.appendChild(g, image);\n    this.renderer.appendChild(parent, g);\n  }\n\n  private pinClicked(pin: Pin) {\n    console.log('pin clicked', pin.id);\n  }\n\n  private drawPinTooltip(x: number, y: number, parent: Element) {\n    const pinId = 'pin-tooltip';\n    const textFontSize = '0.6vw';\n    const textLineDY = '15';\n    const rectBackground = '#ffffff';\n    const rectBorderRadius = '5';\n    const rectOpacity = '0.9';\n    const textRightLeftMargin = 5;\n    const textTopBottomMargin = 3;\n    const spaceBetweenPinAndTooltip = 5;\n\n    const g = this.renderer.createElement('g', this.svgNamespace);\n    this.renderer.setAttribute(g, 'id', pinId);\n\n    const text = this.renderer.createElement('text', this.svgNamespace);\n    this.renderer.setAttribute(text, 'x', x.toString());\n    this.renderer.setAttribute(text, 'y', y.toString());\n    this.renderer.setAttribute(text, 'font-size', textFontSize);\n\n    this.renderer.appendChild(g, text);\n    this.renderer.appendChild(parent, g);\n\n    const textBox = (text as SVGTextElement).getBBox();\n\n    const rect = this.renderer.createElement('rect', this.svgNamespace);\n    this.renderer.setAttribute(rect, 'width', (textBox.width + textRightLeftMargin * 2).toString());\n    this.renderer.setAttribute(rect, 'height', (textBox.height + textTopBottomMargin * 2).toString());\n    this.renderer.setAttribute(rect, 'x', (textBox.x - textBox.width / 2).toString());\n    this.renderer.setAttribute(\n      rect,\n      'y',\n      (textBox.y - textBox.height - textTopBottomMargin * 2 - spaceBetweenPinAndTooltip).toString()\n    );\n    this.renderer.setAttribute(rect, 'fill', rectBackground);\n    this.renderer.setAttribute(rect, 'rx', rectBorderRadius);\n    this.renderer.setAttribute(rect, 'fill-opacity', rectOpacity);\n\n    // add 'margin' to text inside rect\n    this.renderer.setAttribute(text, 'x', (textBox.x - (textBox.width / 2) + textRightLeftMargin).toString());\n\n    const tspans = Array.from((text as SVGTextElement).children);\n    tspans.forEach(t => this.renderer.setAttribute(t, 'x', (textBox.x - (textBox.width / 2) + textRightLeftMargin).toString()));\n\n    // decrease text y with rect height and add space between tooltip and pin\n    this.renderer.setAttribute(\n      text,\n      'y',\n      ((text as SVGTextElement).y.baseVal[0].value - textBox.height - textTopBottomMargin - spaceBetweenPinAndTooltip).toString()\n    );\n\n    this.renderer.insertBefore(g, rect, text);\n  }\n\n  private destroyPinTooltip(): void {\n    const tooltip = document.getElementById('pin-tooltip');\n    tooltip?.remove();\n  }\n\n  private breakTextToLines(text: string): string[] {\n    if (!!!text) {\n      return [];\n    }\n\n    const words = text.split(' ');\n    let currentLength = 0;\n    let newStringIndex = 0;\n    const result: string[] = [];\n\n    words.forEach(w => {\n      if (currentLength >= 25 && currentLength < text.length) {\n        result.push(text.slice(newStringIndex, newStringIndex + currentLength - 1)); // -1 for space removing\n\n        newStringIndex += currentLength;\n        currentLength = 0;\n      }\n\n      currentLength += w.length + 1;\n    });\n\n    result.push(text.slice(newStringIndex));\n\n    return result;\n  }\n}\n\ninterface Pin {\n  id: number;\n  asset: string;\n  disabledAsset: string;\n  position: { y: number, x: number };\n  stickerAsset?: string;\n}\n"}}]);